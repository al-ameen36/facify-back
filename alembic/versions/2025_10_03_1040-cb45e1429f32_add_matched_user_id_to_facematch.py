"""Add matched_user_id to FaceMatch

Revision ID: cb45e1429f32
Revises: c37abab13503
Create Date: 2025-10-03 10:40:46.005870

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
import pgvector
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'cb45e1429f32'
down_revision: Union[str, Sequence[str], None] = 'c37abab13503'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_unknown_face_cluster'), table_name='unknownface')
    op.drop_index(op.f('idx_unknown_face_media'), table_name='unknownface')
    op.drop_table('unknownface')
    op.add_column('facematch', sa.Column('embedding_index', sa.Integer(), nullable=False))
    op.add_column('facematch', sa.Column('matched_user_id', sa.Integer(), nullable=True))
    op.add_column('facematch', sa.Column('distance', sa.Float(), nullable=False))
    op.add_column('facematch', sa.Column('is_participant', sa.Boolean(), nullable=False))
    op.alter_column('facematch', 'event_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_index(op.f('idx_face_match_media'), table_name='facematch')
    op.drop_index(op.f('idx_face_match_user_event'), table_name='facematch')
    op.drop_index(op.f('idx_face_match_user_media'), table_name='facematch')
    op.drop_constraint(op.f('facematch_user_id_fkey'), 'facematch', type_='foreignkey')
    op.drop_constraint(op.f('facematch_media_embedding_id_fkey'), 'facematch', type_='foreignkey')
    op.create_foreign_key(None, 'facematch', 'user', ['matched_user_id'], ['id'])
    op.drop_column('facematch', 'media_embedding_id')
    op.drop_column('facematch', 'user_id')
    op.drop_column('facematch', 'is_notified')
    op.drop_column('facematch', 'confidence')
    op.drop_column('facematch', 'status')
    op.add_column('unknownfacecluster', sa.Column('cluster_label', sqlmodel.sql.sqltypes.AutoString(), nullable=False))
    op.add_column('unknownfacecluster', sa.Column('embeddings', sa.JSON(), nullable=True))
    op.alter_column('unknownfacecluster', 'event_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_index(op.f('idx_unknown_cluster_event'), table_name='unknownfacecluster')
    op.drop_constraint(op.f('unknownfacecluster_claimed_by_user_id_fkey'), 'unknownfacecluster', type_='foreignkey')
    op.drop_column('unknownfacecluster', 'claimed_by_user_id')
    op.drop_column('unknownfacecluster', 'face_count')
    op.drop_column('unknownfacecluster', 'centroid_embedding')
    op.drop_column('unknownfacecluster', 'last_seen')
    op.drop_column('unknownfacecluster', 'claimed_at')
    op.drop_column('user', 'face_match_threshold')
    op.drop_column('user', 'notify_on_face_match')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user', sa.Column('notify_on_face_match', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user', sa.Column('face_match_threshold', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.add_column('unknownfacecluster', sa.Column('claimed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('unknownfacecluster', sa.Column('last_seen', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('unknownfacecluster', sa.Column('centroid_embedding', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('unknownfacecluster', sa.Column('face_count', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('unknownfacecluster', sa.Column('claimed_by_user_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f('unknownfacecluster_claimed_by_user_id_fkey'), 'unknownfacecluster', 'user', ['claimed_by_user_id'], ['id'])
    op.create_index(op.f('idx_unknown_cluster_event'), 'unknownfacecluster', ['event_id'], unique=False)
    op.alter_column('unknownfacecluster', 'event_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('unknownfacecluster', 'embeddings')
    op.drop_column('unknownfacecluster', 'cluster_label')
    op.add_column('facematch', sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('facematch', sa.Column('confidence', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.add_column('facematch', sa.Column('is_notified', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('facematch', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('facematch', sa.Column('media_embedding_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'facematch', type_='foreignkey')
    op.create_foreign_key(op.f('facematch_media_embedding_id_fkey'), 'facematch', 'mediaembedding', ['media_embedding_id'], ['id'])
    op.create_foreign_key(op.f('facematch_user_id_fkey'), 'facematch', 'user', ['user_id'], ['id'])
    op.create_index(op.f('idx_face_match_user_media'), 'facematch', ['user_id', 'media_id'], unique=False)
    op.create_index(op.f('idx_face_match_user_event'), 'facematch', ['user_id', 'event_id'], unique=False)
    op.create_index(op.f('idx_face_match_media'), 'facematch', ['media_id'], unique=False)
    op.alter_column('facematch', 'event_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('facematch', 'is_participant')
    op.drop_column('facematch', 'distance')
    op.drop_column('facematch', 'matched_user_id')
    op.drop_column('facematch', 'embedding_index')
    op.create_table('unknownface',
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('media_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('media_embedding_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('cluster_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['cluster_id'], ['unknownfacecluster.id'], name=op.f('unknownface_cluster_id_fkey')),
    sa.ForeignKeyConstraint(['event_id'], ['event.id'], name=op.f('unknownface_event_id_fkey')),
    sa.ForeignKeyConstraint(['media_embedding_id'], ['mediaembedding.id'], name=op.f('unknownface_media_embedding_id_fkey')),
    sa.ForeignKeyConstraint(['media_id'], ['media.id'], name=op.f('unknownface_media_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('unknownface_pkey'))
    )
    op.create_index(op.f('idx_unknown_face_media'), 'unknownface', ['media_id'], unique=False)
    op.create_index(op.f('idx_unknown_face_cluster'), 'unknownface', ['cluster_id'], unique=False)
    # ### end Alembic commands ###
